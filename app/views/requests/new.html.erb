<% require "open-uri" %>
<% require "json" %>

<% url = ("https://openexchangerates.org/api/currencies.json") %>
<% currencies = JSON.parse(open(url).read) %>
<% cur_array = [] %>
<% currencies.each do |key, value|%>
<%  cur_array << [key] %>
<% end %>

<div class="container">
  <div class="row">

    <div class="col-xs-12 col-lg-4 col-lg-offset-4">
      <h2> What are you swapping?</h2>










<div class="form" id="currency-form">
    <%= simple_form_for @request do |f| %>
      <section id="input-currency">
        <div class="container">
        <%= f.label "input-currency" %>
        <p> Which currency do you have to offer? </p>
        <%= f.select :request_currency, cur_array %>
        <div class="btn btn-success next">NEXT
        </div>
        </div>
      </section>

       <section id="quantity-currency">
        <div class="container">
        <%= f.label "quantity-currency" %>
        <p> How much of your currency do you want to swap? </p>
        <%= f.input :request_amount %>
        <div class="btn btn-success next">NEXT
        </div>
        <div class="btn btn-success previous">PREVIOUS
        </div>
        </div>
      </section>

       <section id="wanted-currency">
        <div class="container">
        <%= f.label "wanted-currency" %>
        <p> Which currency are you looking for? </p>
        <%= f.select :wanted_currency, cur_array %>
        <div class="btn btn-success next">NEXT
        </div>
        <div class="btn btn-success previous">PREVIOUS
        </div>
        </div>
      </section>

       <section id="input-location">
        <div class="container">
        <%= f.label "input-location" %>
        <p> Where do you want to swap?</p>
        <%= f.input :location %>
        <div class="btn btn-success next">NEXT
        </div>
        <div class="btn btn-success previous">PREVIOUS
        </div>
        </div>
      </section>

       <section id="input-time">
        <div class="container">
        <p> When do you want to swap?</p>
        <%= f.date_field :start_date, as: :string, required: false, class: "datepicker" %>
        <div class="btn btn-success next">NEXT
        </div>
        <div class="btn btn-success previous">PREVIOUS
        </div>

        <p> When do you want to swap?</p>
        <%= f.date_field :end_date, required: false, class: "datepicker form-control" %>
        <div class="btn btn-success next">NEXT
        </div>
        <div class="btn btn-success previous">PREVIOUS
        </div>
        </div>
      </section>
      <% end %>
    </div>



<script type="text/javascript">
$(function () {
  var $sections = $('.form-section');

  function navigateTo(index) {
    // Mark the current section with the class 'current'
    $sections
      .removeClass('current')
      .eq(index)
        .addClass('current');
    // Show only the navigation buttons that make sense for the current section:
    $('.form-navigation .previous').toggle(index > 0);
    var atTheEnd = index >= $sections.length - 1;
    $('.form-navigation .next').toggle(!atTheEnd);
    $('.form-navigation [type=submit]').toggle(atTheEnd);
  }

  function curIndex() {
    // Return the current index by looking at which section has the class 'current'
    return $sections.index($sections.filter('.current'));
  }

  // Previous button is easy, just go back
  $('.form-navigation .previous').click(function() {
    navigateTo(curIndex() - 1);
  });

  // Next button goes forward iff current block validates
  $('.form-navigation .next').click(function() {
    $('.demo-form').parsley().whenValidate({
      group: 'block-' + curIndex()
    }).done(function() {
      navigateTo(curIndex() + 1);
    });
  });

  // Prepare sections by setting the `data-parsley-group` attribute to 'block-0', 'block-1', etc.
  $sections.each(function(index, section) {
    $(section).find(':input').attr('data-parsley-group', 'block-' + index);
  });
  navigateTo(0); // Start at the beginning
});
</script>
















    </div>
  </div>
</div>


<%= javascript_pack_tag 'conversion' %>




<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&libraries=places"></script>
        <script>
            var autocomplete;
            function initialize() {
              autocomplete = new google.maps.places.Autocomplete(
                  /** @type {HTMLInputElement} */(document.getElementById('request_location')),
                  { types: ['geocode'] });
              google.maps.event.addListener(autocomplete, 'place_changed', function() {
              });
            }
        </script>
        <body onload="initialize()">
      </body>
